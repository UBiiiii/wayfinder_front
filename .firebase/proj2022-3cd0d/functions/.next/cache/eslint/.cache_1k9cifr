[{"/Users/yubi/summer_code/test/wayfinder-app/src/component/Header.tsx":"1","/Users/yubi/summer_code/test/wayfinder-app/src/config/firebase.ts":"2","/Users/yubi/summer_code/test/wayfinder-app/src/config/interface.ts":"3","/Users/yubi/summer_code/test/wayfinder-app/src/middleware/withAuth.tsx":"4","/Users/yubi/summer_code/test/wayfinder-app/src/pages/_app.tsx":"5","/Users/yubi/summer_code/test/wayfinder-app/src/pages/api/hello.ts":"6","/Users/yubi/summer_code/test/wayfinder-app/src/pages/index.tsx":"7","/Users/yubi/summer_code/test/wayfinder-app/src/pages/login.tsx":"8","/Users/yubi/summer_code/test/wayfinder-app/src/redux/slices/authSlice.tsx":"9","/Users/yubi/summer_code/test/wayfinder-app/src/redux/slices/roomSlice.tsx":"10","/Users/yubi/summer_code/test/wayfinder-app/src/redux/store.ts":"11"},{"size":708,"mtime":1670252288291,"results":"12","hashOfConfig":"13"},{"size":894,"mtime":1669369755269,"results":"14","hashOfConfig":"13"},{"size":455,"mtime":1669885533484,"results":"15","hashOfConfig":"13"},{"size":1115,"mtime":1668925757744,"results":"16","hashOfConfig":"13"},{"size":404,"mtime":1670251120779,"results":"17","hashOfConfig":"13"},{"size":307,"mtime":1665055357204,"results":"18","hashOfConfig":"13"},{"size":23104,"mtime":1670740346434,"results":"19","hashOfConfig":"13"},{"size":1420,"mtime":1670251204946,"results":"20","hashOfConfig":"13"},{"size":1458,"mtime":1670740201727,"results":"21","hashOfConfig":"13"},{"size":1310,"mtime":1670253820286,"results":"22","hashOfConfig":"13"},{"size":426,"mtime":1669815071101,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wl6ic5",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yubi/summer_code/test/wayfinder-app/src/component/Header.tsx",[],[],"/Users/yubi/summer_code/test/wayfinder-app/src/config/firebase.ts",[],[],"/Users/yubi/summer_code/test/wayfinder-app/src/config/interface.ts",[],[],"/Users/yubi/summer_code/test/wayfinder-app/src/middleware/withAuth.tsx",["59"],[],"import { useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport { CgSpinner } from 'react-icons/cg';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { auth, _auth } from '../config/firebase';\n\nconst withAuth: any = (Page: any) => {\n  const Auth = (props : any) => {\n    const { replace } = useRouter();\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n      setLoading(true);\n      const unsubscribe = _auth.onAuthStateChanged(auth, async (user) => {\n        if (!user?.uid) {\n          _auth.signOut(auth);\n          console.log('auth state logged out');\n          replace('/login');\n        } else {\n          console.log('auth state logged in');\n          setLoading(false);\n        } \n      });\n\n      return () => unsubscribe();\n    }, []);\n\n    return !loading ? (\n      <Page {...props} />\n    ) : (\n      <div className=\"flex justify-center items-center min-h-screen bg-gray-100\">\n        <CgSpinner size={30} className=\"animate-spin\" />\n      </div>\n    );\n  };\n\n  return Auth;\n};\n\nexport default withAuth;\n","/Users/yubi/summer_code/test/wayfinder-app/src/pages/_app.tsx",[],[],"/Users/yubi/summer_code/test/wayfinder-app/src/pages/api/hello.ts",[],[],"/Users/yubi/summer_code/test/wayfinder-app/src/pages/index.tsx",["60","61","62","63","64","65","66"],[],"import type { NextPage } from 'next'\nimport { db, storage, _db, _storage } from '../config/firebase'\nimport { useEffect, useRef, useState } from 'react'\nimport withAuth from '../middleware/withAuth'\nimport * as htmlToImage from \"html-to-image\"\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setBles, setNodes, setRooms } from '../redux/slices/roomSlice'\nimport { LinkInfo, NodeInfo, RoomInfo } from '../config/interface'\nimport Header from '../component/Header'\n\ninterface room {\n  name: string,\n  charge: string,\n  phone: string,\n  position_key: {\n    x: number,\n    y: number,\n  },\n  specific: string,\n  with: string,\n}\n\nconst Home: NextPage = () => {\n  const dispatch = useDispatch();\n  const rooms : RoomInfo[] = useSelector((state:any)=>state.rooms.datas);\n  const nodes = useSelector((state:any)=>state.rooms.nodes);\n  const bles = useSelector((state:any)=>state.rooms.bles)\n\n  const userViewRef = useRef<HTMLDivElement>(null);\n  const nodeRef = useRef<HTMLInputElement>(null);\n\n  const [floor, setFloor] = useState(\"\");\n  const [floorBackground, setFB] = useState('');\n  const [mobileBackground, setMB] = useState('');\n\n  const [room, setRoom] = useState({});\n  const [showFloor, setShowFloor] = useState(false);\n  const [roomNumber, setRM] = useState('');\n  const [roomName, setRN] = useState('');\n  const [roomCharge, setRC] = useState('');\n  const [roomTell, setRT] = useState('');\n  const [roomDetail, setRD] = useState('');\n  const [roomWith, setRW] = useState('');\n  const [selectedNode, setSelectedNode] = useState<NodeInfo>();\n\n  const [isMapUpdate, setIsMapUpdate] = useState(false);\n  const [isPathUpdate, setIsPathUpdate] = useState(false);\n  const [isAddNode, setIsAddNode] = useState(false);\n  const [isAddLink, setIsAddLink] = useState(false);\n  const [isSetNode, setIsSetNode] = useState(false);\n\n  const [showNode, setShowNode] = useState(false);\n  const [showBLE, setShowBLE] = useState(false);\n  const [isDeleteNode, setIsDeleteNode] = useState(false);\n\n  // 호실 담당자 참조 변수\n  // 호실 이름 참조 변수\n  // 호실 대표 번호 참조 변수\n  // 호실 세부사항 참조 변수\n  let positionArr = [2];    // 지도 상의 각 호실의 좌표 담는 배열\n  let withVal = \"\";         // 합쳐진 호실의 호실 정보 수정을 리디렉션을 통해 구현할 때 사용되는 변수 \n  let redirect = [3];       // 리디렉트할 호실 번호를 저장하는 배열 \n\n  let resultTemplate;       // 새로 업데이트 된 경로 지도 저장하는 변수\n\n  let count = 0;            // 정보 업데이트 완료 여부를 판단하는 제어 변수\n\n  const saveRef = useRef<HTMLCanvasElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(()=>{\n    if(floor!==\"\") {\n      _storage.getDownloadURL(_storage.ref(storage, `floor${floor}/${floor}층 기본 지도(명칭x).png`)).then((url)=>setFB(url));\n      _storage.getDownloadURL(_storage.ref(storage, `floor${floor}/${floor}층 기본 지도(명칭x)(모바일).png`)).then((url)=>setMB(url));\n\n      const unsubscribe = _db.onValue(_db.ref(db, floor),\n        (snapshot)=>{\n        let lst : any = [];\n          if(snapshot.exists()) {\n            snapshot.forEach((dat)=>{\n              const pos = dat.val()['position_key'];\n              if(pos) lst.push({id:dat.key, ...dat.val()});\n            })\n          }\n          dispatch(setRooms(lst));\n      })\n\n      return unsubscribe;\n    }\n  }, [floor])\n\n  useEffect(()=>{\n    if(floor!==\"\") {\n      const unsubscribe = _db.onValue(_db.ref(db,`nodes/${floor}`),\n        (snapshot)=>{\n          let lst2 : any = [];\n          if(snapshot.exists()) {\n            snapshot.forEach((dat)=>{\n              lst2.push({id:dat.key, ...dat.val(),links:dat.val().links || []});\n            })\n          }\n          dispatch(setNodes(lst2));\n      })\n\n      return unsubscribe;\n    }\n  }, [floor])\n\n  useEffect(()=>{\n    if(floor!==\"\") {\n      const unsubscribe = _db.onValue(_db.ref(db,`bles/${floor}`),\n        (snapshot)=>{\n          let lst : any = [];\n          if(snapshot.exists()) {\n            snapshot.forEach((dat)=>{\n              lst.push({id:dat.key, ...dat.val()});\n            })\n          }\n          dispatch(setBles(lst));\n      })\n\n      return unsubscribe;\n    }\n  }, [floor])\n\n  const RoomButton = ({data, key}:any) => {\n    const x = data.position_key.x;\n    const y = data.position_key.y;\n    \n    return (\n      <button key={key}\n        className={`\n         text-black bg-gray-400\n          top-3 px-2 py-1 rounded-md\n        `}\n        onClick={()=>{selectRoom(data)}}\n      >\n        {data.id}\n      </button>\n    )\n  }\n\n  const selectRoom = (data:any) => {\n    setRoom(data);\n    setRC(data.charge);\n    setRD(data.specific);\n    setRN(data.name);\n    setRT(data.phone);\n    setRM(data.id);\n    setRW(data.with);\n  }\n\n  const RoomPrint = ({data, key, pos}:any) => {\n    const x = data.position_key.x;\n    const y = data.position_key.y;\n\n    const eng = \"abcdefghijklmnopqrstuvwxyz\"\n\n    const name = data.name.split(\" \");\n    const print:string[] = [];\n    name.forEach((str:string)=>{\n      print.push(str);\n    })\n    \n    return (\n      <div key={key}\n        className={`\n          absolute top-3 w-24\n          ${pos===\"mirror\" ? \"text-white\" : \"text-black\"}\n        `}\n        style={{\n          top:`${y-(print.length * 15)}px`,\n          left:`${x-45}px`,\n        }}\n      >\n        {print.map((row,key)=>(\n          <span key={key} className='block'>{row}</span>  \n        ))}\n      </div>\n    )\n  }\n\n  const NodePrint = ({data, key}:any) => {\n    const x = data.x;\n    const y = data.y;\n    \n    return (\n      <div key={key}\n        className={`absolute z-30 w-5 h-5 rounded-full text-sm cursor-pointer\n          ${selectedNode === data ? 'bg-red-600' : 'bg-green-400'}\n          ${showNode ? \"block\" : \"hidden\"}\n        `}\n        style={{\n          top:`${y-10}px`,\n          left:`${x-10}px`,\n        }}\n        onClick={()=>handleNode(data)}\n      >\n        {data.id}\n      </div>\n    )\n  }\n\n  const BLEPrint = ({data, key}:any) => {\n    const x = data.x;\n    const y = data.y;\n    \n    return (\n      <div key={key}\n        className={`absolute z-30 w-5 h-5 rounded-full text-sm cursor-pointer bg-blue-600 text-white\n          ${showBLE ? \"block\" : \"hidden\"}\n        `}\n        style={{\n          top:`${y-10}px`,\n          left:`${x-10}px`,\n        }}\n        onClick={()=>handleNode(data)}\n      >\n        {data.id}\n      </div>\n    )\n  }\n\n  const floorChange = (floor:any) => {\n    setFloor(floor);\n    setRM('');\n    setRN('');\n    setRC('');\n    setRD('');\n    setRT('');\n    setRW('');\n    console.log(floor);\n    setShowFloor(false);\n  }\n\n  const floors = [\"3\", \"4\"];\n\n  const saveMap = () => {\n    setIsPathUpdate(true);\n    setShowNode(false);\n    setShowBLE(false);\n    htmlToImage.toBlob(document.getElementById(\"userView\") as HTMLElement)\n      .then(async (blob)=>{\n        const unsubscribe = _storage.uploadBytesResumable(_storage.ref(storage, `map/floor${floor}.png`), blob as Blob);\n        \n        unsubscribe.on('state_changed',\n          (snapshot)=>{\n            console.log(snapshot.bytesTransferred/snapshot.totalBytes);\n          },\n          (err)=>{console.log(err)},\n          ()=>{\n            console.log('save complete');\n            rooms.forEach((el:any)=>{\n              setCanvas2(floor, el.id);\n            });\n            setIsPathUpdate(false);\n          }\n        )\n      })\n\n    htmlToImage.toBlob(document.getElementById(\"mobileView\") as HTMLElement)\n    .then(async (blob)=>{\n      const unsubscribe = _storage.uploadBytesResumable(_storage.ref(storage, `map/floor${floor}_mobile.png`), blob as Blob);\n      \n      unsubscribe.on('state_changed',\n        (snapshot)=>{\n          console.log(snapshot.bytesTransferred/snapshot.totalBytes);\n        },\n        (err)=>{console.log(err)},\n        ()=>{\n          console.log('save mobile complete');\n        }\n      )\n    })\n  }\n\n  const changeApply = async () => {\n    if(roomNumber) {\n      _db.update(_db.ref(db,`${floor}/${roomNumber}`), {\n        name:roomName,\n        phone:roomTell,\n        charge:roomCharge,\n        specific:roomDetail,\n      }) \n\n      console.log(roomWith);\n\n      if(roomWith) {\n        _db.update(_db.ref(db,`${floor}/${roomWith}`), {\n          name:roomName,\n          phone:roomTell,\n          charge:roomCharge,\n          specific:roomDetail,\n        })\n      } \n    }\n  }\n\n  const setCanvas2 = async (floorNum:string, roomNum:string) => {\n    /* document 상에서는 숨겨진 mycavas2를 불러와 그 위에 그림을 그린다 */\n    const canvas = saveRef.current;\n    if (canvas) {\n      /* canvas의 2d Context를 받아옴 */\n      var ctx = canvas.getContext('2d');\n      console.log(\"save path\");\n      /* url을 통해 불러올 이미지 object를 2개 생성 (맵, 경로)\n      이때 crossOrigin 문제를 해결하기 위해 anonymous로 설정*/\n      const imageObj = document.createElement(\"img\");\n      const pathObj = document.createElement(\"img\");\n      pathObj.setAttribute(\"crossOrigin\", \"anonymous\");\n      imageObj.setAttribute(\"crossOrigin\", \"anonymous\");\n\n      /* image url이 load되면 이미지를 Context에 그리는 함수와\n      path url이 load되면 이미지를 Context에 그리는 함수\n      순서는 map이 load된 뒤, path가 load되도록 path 함수를 안쪽에 구성*/\n      imageObj.onload = async () => {\n        pathObj.onload = async () => {\n\n          /* 받아온 url의 이미지(층, 경로 이미지)를 canvas에 그림 */\n          canvas.width=517;\n          canvas.height=1180;\n          ctx?.drawImage(imageObj, 0, 0, canvas.width, canvas.height);\n          ctx?.drawImage(pathObj, 0, 0, canvas.width, canvas.height);\n\n          /* 받아온 이름 정보를 같이 받아온 위치 정보를 사용하여 이미지 위에 표시 */\n          \n          canvas.toBlob(async (blob)=>{\n            await _storage.uploadBytes(_storage.ref(storage, `result/floor${floor}/${roomNum}.png`),blob as Blob);\n            console.log(`save map ${roomNum}}`);\n          })\n          /* 새로운 이미지를 그리기 위해 Context를 초기화 */\n          ctx?.clearRect(0, 0, canvas.width, canvas.height);\n        }\n        /* 이미지 객체에 path url를 load함 (이때 위의 함수 실행) */\n        pathObj.src = await _storage.getDownloadURL(_storage.ref(storage, `path/floor${floorNum}/${roomNum}.png`));\n      };\n      /* 이미지 객체에 map url를 load함 (이때 위의 함수 실행) */\n      imageObj.src = await _storage.getDownloadURL(_storage.ref(storage, `map/floor${floorNum}.png`));\n    };\n  };\n\n  const addNode = async (e:any) => {\n    if(isAddNode) {\n      console.log(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n      const nodes = (await _db.get(_db.ref(db,`nodes/${floor}`)));\n      const len = nodes.exists() ? nodes.val().length : 0;\n      _db.set(_db.ref(db, `nodes/${floor}/${len}`),{\n        x:e.nativeEvent.offsetX,\n        y:e.nativeEvent.offsetY,\n      })\n    }\n\n    setIsAddNode(false);\n  }\n\n  const addLink = async (node:NodeInfo) => {\n\n    if(!selectedNode) {\n      setSelectedNode(node);\n      return;\n    } else {\n      const preNode = selectedNode;\n      if(preNode.id !== node.id) {\n        const links = (await _db.get(_db.ref(db,`links/${floor}`)));\n        const len = links.exists() ? links.val().length : 0;\n        const link:LinkInfo = {\n          id:len,\n          node1:preNode?.id,\n          node2:node?.id,\n          mass:Math.sqrt(Math.pow(preNode.x - node.x,2) + Math.pow(preNode.y - node.y,2)),\n        };\n\n        await _db.set(_db.ref(db, `links/${floor}/${len}`), link);\n        \n        const linkLst1 = (await _db.get(_db.ref(db,`nodes/${floor}/${preNode.id}/links`))).val() || [];\n        const linkLst2 = await (await _db.get(_db.ref(db, `nodes/${floor}/${node.id}/links`))).val() || [];\n\n        linkLst1.push(link);\n        linkLst2.push(link);\n\n        console.log(preNode.id, node.id);\n\n        await _db.update(_db.ref(db, `nodes/${floor}/${preNode.id}`), {links:linkLst1});\n        await _db.update(_db.ref(db, `nodes/${floor}/${node.id}`), {links:linkLst2});\n\n        console.log(\"add link\");\n      } else console.log(\"same node\");\n      setSelectedNode(undefined);\n      setIsAddLink(false);\n    }\n  }\n\n  const setDestNode = async (node:NodeInfo) => {\n    const dest = (await _db.get(_db.ref(db,`nodes/${floor}/${node.id}/dest`))).val() || [];\n    if(!dest.includes(node.id)) {\n      dest.push(roomNumber);\n      console.log(dest);\n      await _db.set(_db.ref(db,`nodes/${floor}/${node.id}/dest`),dest);\n    }\n    setIsSetNode(false);\n  }\n\n  const deleteNode = async (node:NodeInfo) => {\n    const nodeData  = (await _db.get(_db.ref(db, `nodes/${floor}`))).val();\n    const linkData = (await _db.get(_db.ref(db, `links/${floor}`))).val();\n    const nodeEntries = Object.values(nodeData);\n    const linkEntries = Object.values(linkData);\n    const id = node.id;\n    console.log(nodeEntries);\n    const filterList = nodeEntries.filter((v,i)=>i!==id).map((v,i)=>(v as NodeInfo).id = i);\n    // await _db.set(_db.ref(db, `nodes/${floor}`),filterList);\n    console.log(id);\n    console.log(filterList);\n  }\n\n  const handleNode = async (node:NodeInfo) => {\n    if(isAddLink) await addLink(node);\n    if(isSetNode) await setDestNode(node);\n    if(isDeleteNode) await deleteNode(node);\n  }\n\n  return (\n    <div className='relative flex flex-col w-full h-full'>\n      <Header />\n      {isMapUpdate &&\n        <div className='absolute z-50 flex justify-center items-center w-screen h-screen bg-gray-500 bg-opacity-80 backdrop-blur-xl text-4xl gap-5'>\n          <svg\n            className='animate-spin'\n            width={220}\n            height={220}\n            viewBox=\"0 0 220 220\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            preserveAspectRatio=\"none\"\n          >\n            <path\n              d=\"M10 110C10 170 58 210 110 210C162 210 210 166 210 110C210 54 162 10 110 10\"\n              stroke=\"#AE71C4\"\n              strokeWidth={20}\n            />\n          </svg>\n          Save Map Data...\n        </div>\n      }\n      {isPathUpdate &&\n        <div className='absolute z-50 flex justify-center items-center w-screen h-screen bg-gray-500 bg-opacity-80 backdrop-blur-xl text-4xl gap-5'>\n          <svg\n            className='animate-spin'\n            width={220}\n            height={220}\n            viewBox=\"0 0 220 220\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            preserveAspectRatio=\"none\"\n          >\n            <path\n              d=\"M10 110C10 170 58 210 110 210C162 210 210 166 210 110C210 54 162 10 110 10\"\n              stroke=\"#AE71C4\"\n              strokeWidth={20}\n            />\n          </svg>\n\n          Save Path Data...\n        </div>\n      }\n      <div id=\"dataField\" className='w-full px-40 z-30'>\n        <div id=\"choice\" className='px-4 py-4 h-20 justify-between flex'>\n          <div id=\"floor\" className='overflow-visible relative'>\n            <button\n              className='px-2 py-1 border-2 rounded-md bg-black text-white'\n              onClick={()=>setShowFloor(!showFloor)}\n            >\n              Floor\n            </button>\n            {showFloor && (\n              <div className='border-2 bg-white absolute w-full'>\n              {floors.map((floor, key)=>(\n                <div \n                  key={key}\n                  className=\"cursor-pointer\"\n                  onClick={()=>(floorChange(floor))}\n                >\n                  {floor}\n                </div>\n              ))} \n              </div>\n            )}\n          </div>\n          <div>\n            <div>\n              <button\n                className={`\n                  h-min px-2 py-1 border-2 rounded-md text-white\n                  ${isAddNode ? \"bg-green-500\" : \"bg-black\"}\n                `}\n                onClick={()=>{setIsAddNode(!isAddNode)}}\n              >\n                Add Node\n              </button>\n              <button\n                className={`\n                  h-min px-2 py-1 border-2 rounded-md text-white\n                  ${isAddLink ? \"bg-green-500\" : \"bg-black\"}\n                `}\n                onClick={()=>{setIsAddLink(!isAddLink)}}\n              >\n                Add Link\n              </button>\n              <button\n                className={`\n                  h-min px-2 py-1 border-2 rounded-md text-white\n                  ${isDeleteNode ? \"bg-green-500\" : \"bg-black\"}\n                `}\n                onClick={()=>{setIsDeleteNode(!isDeleteNode)}}\n              >\n                Delete Node\n              </button>\n            </div>\n            <div className='flex gap-3'>\n              <div className='flex items-start gap-3' onClick={()=>{setShowNode(!showNode)}}>\n                {showNode ? \n                  <div className=\"flex-grow-0 flex-shrink-0 w-[24px] h-[24px] rounded-sm bg-[#49454f]\">\n                    <svg\n                      width={24}\n                      height={24}\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"flex-grow-0 flex-shrink-0 w-6 h-6 relative\"\n                      preserveAspectRatio=\"xMidYMid meet\"\n                    >\n                      <path d=\"M10 16.4L6 12.4L7.4 11L10 13.6L16.6 7L18 8.4L10 16.4Z\" fill=\"white\" />\n                    </svg>\n                  </div>\n                : \n                  <div className=\"flex-grow-0 flex-shrink-0 w-[24px] h-[24px] rounded-sm border-2 border-[#49454f]\" />\n                }\n                  Show node\n              </div>\n              <div className='flex items-start gap-3' onClick={()=>{setShowBLE(!showBLE)}}>\n                {showBLE ? \n                  <div className=\"flex-grow-0 flex-shrink-0 w-[24px] h-[24px] rounded-sm bg-[#49454f]\">\n                    <svg\n                      width={24}\n                      height={24}\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"flex-grow-0 flex-shrink-0 w-6 h-6 relative\"\n                      preserveAspectRatio=\"xMidYMid meet\"\n                    >\n                      <path d=\"M10 16.4L6 12.4L7.4 11L10 13.6L16.6 7L18 8.4L10 16.4Z\" fill=\"white\" />\n                    </svg>\n                  </div>\n                : \n                  <div className=\"flex-grow-0 flex-shrink-0 w-[24px] h-[24px] rounded-sm border-2 border-[#49454f]\" />\n                }\n                  Show BLE\n              </div>\n            </div>\n          </div>\n\n          <div className='flex'>\n            <button\n              className='h-min px-2 py-1 border-2 rounded-md bg-black text-white'\n              onClick={saveMap}\n            >\n              Save Map\n            </button>\n\n            <button\n              className={`\n                h-min px-2 py-1 border-2 rounded-md text-white\n                ${isSetNode ? \"bg-green-500\" : \"bg-black\"}\n              `}\n              onClick={()=>{setIsSetNode(!isSetNode)}}\n            >\n              Set Node\n            </button>\n\n            <button\n              className='h-min px-2 py-1 border-2 rounded-md bg-black text-white'\n              onClick={changeApply}\n            >\n              Change Apply\n            </button>\n          </div>\n        </div>\n\n        <div id='room_data' className='w-full flex flex-col gap-3 z-0'>\n          <table className=\"table-fixed border-2 w-full bg-white\">\n            <thead>\n              <tr className=\"border-b-2\">\n                <th> Num</th>\n                <th> Name</th>\n                <th> Charge</th>\n                <th> Tel.</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>\n                  <input type=\"text\" value={roomNumber} className=\"w-full border-none h-10 text-center\" readOnly/>\n                </td>\n                <td>\n                  <input type=\"text\" value={roomName} className=\"w-full border-none h-10 text-center\" onChange={e=>{setRN(e.target.value)}}/>\n                </td>\n                <td>\n                  <input type=\"text\" value={roomCharge} className=\"w-full border-none h-10 text-center\" onChange={e=>{setRC(e.target.value)}}/>\n                </td>\n                <td>\n                  <input type=\"text\" value={roomTell} className=\"w-full border-none h-10 text-center\" onChange={e=>{setRT(e.target.value)}}/>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <div>\n          Detail\n          <textarea\n            className='w-full h-30 resize-none cursor-text'\n            value={roomDetail}\n            onChange={(e)=>{\n              setRD(e.target.value);\n            }}\n          />\n          </div>\n        </div>\n      </div>\n\n      <div className='flex'>\n        <div id=\"mapField\"\n          className={`w-fit items-center justify-center grid grid-cols-2 px-10 py-10 ${floor ? 'flex' : 'hidden'}`}\n        >\n          <div className='w-[537px] flex flex-col gap-3 text-center justify-center'>\n            Mobile Zone\n            <div\n              id=\"mobileView\"\n              className=\"relative w-[517px] h-[1180px]\"\n            >\n              <img id=\"\"\n                src={mobileBackground}\n                className=\"flex w-full h-full object-cover\"\n              />\n              {rooms?.length && rooms?.filter((el:RoomInfo)=>el[\"position_key\"]!==undefined).map((v:RoomInfo, i:number)=>(\n                <RoomPrint data={v} key={i} pos={\"mobile\"}/>\n              ))}\n            </div>\n          </div>\n\n          <div className='w-[537px] flex flex-col gap-3 text-center justify-center'>\n            User view\n            <div\n              id=\"userView\"\n              ref={userViewRef}\n              className=\"relative w-[517px] h-[1180px] bg-no-repeat bg-center bg-cover bg-white dark:bg-black\"\n              onMouseDown={(e)=>addNode(e)}\n            >\n              <img\n                src={floorBackground}\n                className=\"flex w-full h-full object-cover\"\n              />\n              {rooms?.length && rooms?.filter((el:RoomInfo)=>el[\"position_key\"]!==undefined).map((data:RoomInfo, key:number)=>(\n                <RoomPrint data={data} key={key} pos={\"mirror\"}/>\n              ))}\n              {nodes?.length && nodes?.map((data:any, key:number)=>(\n                <NodePrint data={data} key={key}/>\n              ))}\n              {bles?.length && bles?.map((data:any, key:number)=>(\n                <BLEPrint data={data} key={key}/>\n              ))}\n            </div>\n          </div>\n\n          <canvas hidden id=\"mycanvas2\" ref={saveRef}></canvas>\n        </div>\n\n        <div className={`${floor ? 'flex flex-col' : 'hidden'} w-fit px-10 py-10 gap-3`}>\n          Room List\n          {rooms?.map((data:RoomInfo,key:number)=>(\n            <RoomButton data={data} key={key}/>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default withAuth(Home);\n","/Users/yubi/summer_code/test/wayfinder-app/src/pages/login.tsx",[],[],"/Users/yubi/summer_code/test/wayfinder-app/src/redux/slices/authSlice.tsx",[],[],"/Users/yubi/summer_code/test/wayfinder-app/src/redux/slices/roomSlice.tsx",[],[],"/Users/yubi/summer_code/test/wayfinder-app/src/redux/store.ts",[],[],{"ruleId":"67","severity":1,"message":"68","line":27,"column":8,"nodeType":"69","endLine":27,"endColumn":10,"suggestions":"70"},{"ruleId":"67","severity":1,"message":"71","line":90,"column":6,"nodeType":"69","endLine":90,"endColumn":13,"suggestions":"72"},{"ruleId":"67","severity":1,"message":"71","line":107,"column":6,"nodeType":"69","endLine":107,"endColumn":13,"suggestions":"73"},{"ruleId":"67","severity":1,"message":"71","line":124,"column":6,"nodeType":"69","endLine":124,"endColumn":13,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":640,"column":15,"nodeType":"77","endLine":643,"endColumn":17},{"ruleId":"78","severity":1,"message":"79","line":640,"column":15,"nodeType":"77","endLine":643,"endColumn":17},{"ruleId":"75","severity":1,"message":"76","line":658,"column":15,"nodeType":"77","endLine":661,"endColumn":17},{"ruleId":"78","severity":1,"message":"79","line":658,"column":15,"nodeType":"77","endLine":661,"endColumn":17},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'replace'. Either include it or remove the dependency array.","ArrayExpression",["80"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["81"],["82"],["83"],"@next/next/no-img-element","Do not use `<img>` element. Use `<Image />` from `next/image` instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},{"desc":"86","fix":"88"},{"desc":"86","fix":"89"},"Update the dependencies array to be: [replace]",{"range":"90","text":"91"},"Update the dependencies array to be: [dispatch, floor]",{"range":"92","text":"93"},{"range":"94","text":"93"},{"range":"95","text":"93"},[840,842],"[replace]",[3155,3162],"[dispatch, floor]",[3588,3595],[3988,3995]]